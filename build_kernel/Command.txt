/*--- GPIO ---*/
#define GPIO_21 (21)
//Checking the GPIO is valid or not

if(gpio_is_valid(GPIO_21) == false){
pr_err("GPIO %d is not valid\n", GPIO_21);
goto r_device;
}

//Requesting the GPIO
if(gpio_request(GPIO_21,"GPIO_21") < 0){
pr_err("ERROR: GPIO %d request\n", GPIO_21);
goto r_gpio;
}

//configure the GPIO as output
gpio_direction_output(GPIO_21, 0);
//configure the GPIO as input
gpio_direction_input(GPIO_21);
//read value of GPIO
gpio_get_value(GPIO_21);
//release GPIO
gpio_free(GPIO_21);

/*--- SPI ---*/
// Add this text to config.txt file
dtoverlay=spi1-1cs,cs0_spidev=disabled
//Code C
#define SPI_BUS_NUM             (  1 )    // SPI 1

static struct spi_device *etx_spi_device;

struct spi_board_info etx_spi_device_info = 
{
  .modalias     = "spi_driver",
  .max_speed_hz = 100000,              // speed your device (slave) can handle
  .bus_num      = SPI_BUS_NUM,          // SPI 1
  .chip_select  = 0,                    // Use 0 Chip select (GPIO 18)
  .mode         = SPI_MODE_0            // SPI mode 0
};

int     ret;
struct  spi_master *master;

master = spi_busnum_to_master( etx_spi_device_info.bus_num );
if( master == NULL )
{
pr_err("SPI Master not found.\n");
return -ENODEV;
}

// create a new slave device, given the master and device info
etx_spi_device = spi_new_device( master, &etx_spi_device_info );
if( etx_spi_device == NULL ) 
{
pr_err("FAILED to create slave.\n");
return -ENODEV;
}

// 8-bits in a word
etx_spi_device->bits_per_word = 8;

// setup the SPI slave device
ret = spi_setup( etx_spi_device );
if( ret )
{
pr_err("FAILED to setup slave.\n");
spi_unregister_device( etx_spi_device );
return -ENODEV;
}

pr_info("SPI driver Registered\n");